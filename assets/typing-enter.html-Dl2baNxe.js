import{_ as e,r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-B9iGP_ub.js";const l={},u=n("h1",{id:"typing-项目技术总结-字符输入逻辑",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typing-项目技术总结-字符输入逻辑"},[n("span",null,"Typing 项目技术总结 - 字符输入逻辑")])],-1),r={href:"https://typing.yasinchan.com",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/YasinChan/typing",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[n("img",{src:"https://file.yasinchan.com/nS2xPufcI5TKM93b4N4a91oDAbPavS6F/2559139329.png",alt:""})],-1),v={href:"https://typing.yasinchan.com/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/YasinChan/typing/blob/main/src/components/WordInput.vue",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"主要涉及到几个点：",-1),g=n("ul",null,[n("li",null,"文案渲染"),n("li",null,"输入框"),n("li",null,"文案与输入内容绑定"),n("li",null,"限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑"),n("li",null,"其他个性化功能逻辑")],-1),h=n("h2",{id:"文案渲染",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#文案渲染"},[n("span",null,"文案渲染")])],-1),f={href:"https://github.com/YasinChan/typing/blob/main/src/files/Quote.json",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-json line-numbers-mode" data-ext="json" data-title="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;long&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;散文&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;xxx&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;medium&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;散文&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;medium&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;content&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;short&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;author&quot;</span><span class="token operator">:</span> <span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;片段&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;length&quot;</span><span class="token operator">:</span> <span class="token string">&quot;short&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;content&quot;</span><span class="token operator">:</span> <span class="token string">&quot;content&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到我分为了三种长度的文案类型，方便用户选择，在这文案的基础上的逻辑开发过程如下：</p>`,2),q={href:"https://github.com/YasinChan/typing/blob/e98a68a4cbe5c766d4ae260423bbac3814398b88/src/components/WordInput.vue#L431",target:"_blank",rel:"noopener noreferrer"},x=p(`<div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- vue template 语法--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-word-input__quote<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span>
    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in state.quoteArr<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[item.isWrong ? &#39;is-wrong&#39; : &#39;&#39;, item.isInput ? &#39;is-input&#39; : &#39;&#39;]<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span>
    <span class="token punctuation">&gt;</span></span>{{ item.word }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span>
  <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出每个字都被 <code>&lt;span&gt;</code> 包裹，这样可以在每个 <code>&lt;span&gt;</code>上通过 <strong>class</strong> <code>is-wrong</code> 和 <code>is-input</code> 来达到不同状态的样式呈现。</p><h2 id="输入框" tabindex="-1"><a class="header-anchor" href="#输入框"><span>输入框</span></a></h2><p>输入框是基于 <strong>div contenteditable</strong> 实现，与上述渲染的文案排版逻辑是通过将两者的 <code>line-height</code> 设置为 <strong>70px</strong>，然后通过绝对定位的方式层叠渲染，使彼此的内容恰好在文案间隙中，达到流畅换行的目的。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputAreaRef<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@paste</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pasteEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@keydown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>keyDownEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>inputEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@mousedown.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mouseDownEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@mouseup.prevent</span>
  <span class="token attr-name">@beforeinput</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>beforeInputEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@compositionstart</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>compositionStartEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@compositionupdate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>compositionUpdateEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">@compositionend</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>compositionEndEvent<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>y-word-input__input-area<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">contenteditable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代码可以看到这里绑定了很多事件，这里主要目的是两个</p><ol><li>监听输入事件用于记录内容用于错误统计和回放功能</li><li>粘贴、撤销、反撤销、键盘选中等事件都需要取消掉，避免干扰情况</li></ol><p>关于第一点，先引入 **<code>CompositionEvent</code>**和 <code>beforeinput</code> 的概念</p><h3 id="compositionevent-和-beforeinput" tabindex="-1"><a class="header-anchor" href="#compositionevent-和-beforeinput"><span><strong>CompositionEvent</strong> 和 <strong>beforeinput</strong></span></a></h3><blockquote><p>DOM 接口  <strong><code>CompositionEvent</code></strong>  表示用户间接输入文本（如使用输入法）时发生的事件。此接口的常用事件有 <code>compositionstart</code>, <code>compositionupdate</code> 和  <code>compositionend</code></p></blockquote>`,10),w=n("strong",null,"IME",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/CompositionEvent",target:"_blank",rel:"noopener noreferrer"},E=p("<ul><li>当我们开始输入组合字符，会触发 <code>compositionstart</code> ，</li><li>在输入过程中会持续触发 <code>compositionupdate</code> ，</li><li>当完成时，比如按下空格或者回车等，则会触发 <code>compositionend</code> 。</li></ul><blockquote><p>DOM 事件 <strong><code>beforeinput</code></strong>  在<code>[&lt;input&gt;]</code>, <code>&lt;select&gt;</code>  或  <code>&lt;textarea&gt;</code> 的值即将被修改前触发。这个事件也可以在  <code>contenteditable</code>  被设置为 <code>true</code> 的元素和打开  <code>designMode</code>  后的任何元素上被触发。</p></blockquote>",2),C=n("code",null,"beforeinput",-1),T={href:"https://github.com/ianstormtaylor/slate",target:"_blank",rel:"noopener noreferrer"},A=p(`<h3 id="监听输入事件用于记录内容用于错误统计和回放功能" tabindex="-1"><a class="header-anchor" href="#监听输入事件用于记录内容用于错误统计和回放功能"><span>监听输入事件用于记录内容用于错误统计和回放功能</span></a></h3><p>这个功能在下一篇文章中将会提到，这里先简要说一下相关逻辑：</p><p>这里的逻辑中除了需要记录中英文，还需要记录在 <strong>composition</strong> 状态下的英文。用到的事件是 <code>input</code> <code>beforeinput</code> <code>compositionstart</code> <code>compositionupdate</code> <code>compositionend</code> ，英文输入相关是通过 <code>input</code> 进行记录，中文输入会在 <code>compositionend</code> 中记录，然后通过 <code>CompositionEvent</code> 结合 <code>beforeinput</code> 可以记录下在 composition 状态下的英文了。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">beforeInputEvent</span><span class="token punctuation">(</span>e<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  state<span class="token punctuation">.</span>isTyping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>inputType <span class="token operator">===</span> <span class="token string">&#39;insertCompositionText&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>compositionList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 处于 composition 状态</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>currentComposition <span class="token operator">===</span> e<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\w+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 这里是 composition 状态结束的条件，比如按了空格、回车。</span>
      state<span class="token punctuation">.</span>isComposing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      state<span class="token punctuation">.</span>currentComposition <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    state<span class="token punctuation">.</span>currentComposition <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>inputType <span class="token operator">===</span> <span class="token string">&#39;deleteContentBackward&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>currentComposition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果在 composition 状态下鼠标点了旁边，这时 composition 状态下的输入会被删除，此时只需要将 currentComposition 清空即可。</span>
      state<span class="token punctuation">.</span>currentComposition <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外在输入过程中还定义了两个列表，用于做一些特殊字符过滤处理。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> whiteList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;”&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;》&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;）&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;’&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 白名单，这些字符不会被标记为错误</span>
<span class="token keyword">const</span> compositionList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;“”&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;《》&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;{}&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;（）&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;【】&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;‘’&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// composition 状态下的字符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="禁用部分输入和键盘事件-避免干扰" tabindex="-1"><a class="header-anchor" href="#禁用部分输入和键盘事件-避免干扰"><span>禁用部分输入和键盘事件，避免干扰</span></a></h3><p>上面说到的第二点，在输入期间，为确保输入过程不被其他情况干扰，这里会将比如粘贴事件、选择事件等都禁用。</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">pasteEvent</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ClipboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">keyDownEvent</span><span class="token punctuation">(</span>e<span class="token operator">:</span> KeyboardEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;keydown-event&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;ENTER&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>props<span class="token punctuation">.</span>isSpaceType <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>canSpace <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;SPACE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>
    e<span class="token punctuation">.</span>shiftKey <span class="token operator">&amp;&amp;</span>
    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;ARROW_LEFT&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> e<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;ARROW_RIGHT&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// shift + 左右方向键禁止</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;KEY_A&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ctrl + a 禁止 或者 command + a 禁止</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;KEY_Z&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ctrl + z 禁止 或者 command + z 禁止</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>metaKey <span class="token operator">||</span> e<span class="token punctuation">.</span>ctrlKey<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token constant">KEY_CODE_ENUM</span><span class="token punctuation">[</span><span class="token string">&#39;BACKSPACE&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ctrl + back space 禁止 或者 command + back space 禁止</span>
    e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时通过禁用 mouse 相关事件，将鼠标选择事件也禁用掉。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>@mousedown.prevent @mouseup.prevent
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不过这会导致如果输入框失焦，那么也将无法通过鼠标点击来 focus。因此，这里在 mousedown 上还需要加上一个逻辑</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">focusInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputAreaRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
  inputAreaRef<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">moveCaretToEnd</span><span class="token punctuation">(</span>inputAreaRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">moveCaretToEnd</span><span class="token punctuation">(</span>element<span class="token operator">:</span> HTMLElement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 使光标移动到末尾</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>createRange <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>getSelection<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> selection <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span><span class="token function">selectNodeContents</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    selection <span class="token operator">&amp;&amp;</span> selection<span class="token punctuation">.</span><span class="token function">removeAllRanges</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    selection <span class="token operator">&amp;&amp;</span> selection<span class="token punctuation">.</span><span class="token function">addRange</span><span class="token punctuation">(</span>range<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// @ts-ignore</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>createTextRange<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// For older IE</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token keyword">const</span> range <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">createTextRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span><span class="token function">moveToElementText</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span><span class="token function">collapse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    range<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于点击输入框时，光标直接在末尾呈现。</p><h2 id="文案与输入内容绑定" tabindex="-1"><a class="header-anchor" href="#文案与输入内容绑定"><span>文案与输入内容绑定</span></a></h2><p>上面所说的用于渲染文案的数据结构是这样的</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">type</span> <span class="token class-name">SentenceArrItem</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  word<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  isInput<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  isWrong<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token operator">...</span>
  quoteArr<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> SentenceArrItem<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相关 <code>input</code> <code>beforeinput</code> <code>composition</code> 事件触发时会改变 <code>state.inputText</code> 的内容，</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token function">watch</span><span class="token punctuation">(</span>
  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>inputText<span class="token punctuation">,</span>
  <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> inputTextArr <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> wrongPos<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    state<span class="token punctuation">.</span>quoteArr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      item<span class="token punctuation">.</span>isInput <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      item<span class="token punctuation">.</span>isWrong <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>inputTextArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        item<span class="token punctuation">.</span>isInput <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        item<span class="token punctuation">.</span>isWrong <span class="token operator">=</span> item<span class="token punctuation">.</span>word <span class="token operator">!==</span> inputTextArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>isWrong<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          wrongPos<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>whiteList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>inputTextArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          item<span class="token punctuation">.</span>isInput <span class="token operator">=</span> item<span class="token punctuation">.</span>word <span class="token operator">===</span> inputTextArr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
          item<span class="token punctuation">.</span>isWrong <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后 <code>watch state.inputText</code>，在其中对 <code>state.quoteArr</code> 进行改变，最终触发文案渲染的改变。</p><h2 id="限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑" tabindex="-1"><a class="header-anchor" href="#限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑"><span>限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑</span></a></h2><p>在完成以上功能之后，组件会在不同阶段 emit 出一些事件，用于业务逻辑的处理</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token function">defineEmits</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;is-typing&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;keydown-event&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;is-finished&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里的业务逻辑需要注意在页面切换的时候及时销毁定时器等，避免内存泄漏。</p><p>这三个模式中都有刷新文案的功能，逻辑是只用保证刷新时下一次结果不是当前的文案即可。 不过其中计时模式下的短句类型的刷新逻辑不一样，短句每次刷新是从数组中随机取其中五条，为此，我这里使用了 <code>Fisher-Yates 洗牌算法</code></p><h3 id="fisher-yates-洗牌算法" tabindex="-1"><a class="header-anchor" href="#fisher-yates-洗牌算法"><span>Fisher-Yates 洗牌算法</span></a></h3><p>该算法的核心思想是：</p><ul><li>从数组（或列表）的最后一个元素开始，向前遍历整个数组。</li><li>对于数组中的每一个元素（从最后一个元素开始直到第一个元素），生成一个介于当前索引（含）与数组末尾之间的随机索引。</li><li>用随机索引指向的元素与当前元素交换位置。</li><li>继续这个过程直到遍历到数组的第一个元素为止。</li></ul><p>对应的具体实现为</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">getRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> array <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>Sentence<span class="token punctuation">[</span>state<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> state<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;The array length should be at least 5&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 创建一个包含原数组所有索引的数组</span>
  <span class="token keyword">const</span> indices <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> length<span class="token operator">:</span> array<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 使用 Fisher-Yates 洗牌算法打乱索引数组</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> indices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> j <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">[</span>indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> indices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>indices<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> indices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 选取前 length 个随机索引，并从原数组中获取对应元素</span>
  <span class="token keyword">return</span> indices<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>len<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> array<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="上传文档" tabindex="-1"><a class="header-anchor" href="#上传文档"><span>上传文档</span></a></h3><p>自定义模式下<strong>上传文档</strong>可以细说一下。需要注意的是，前端自身是<strong>不具备</strong>直接解析或展示 .doc 等格式文档的能力的，目前只有 <code>.txt</code> 这种纯文本格式的内容可以读出来。所以借助 input file</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>uploadFile<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">accept</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.txt<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@change</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleFileChange<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>来读取 <code>.txt</code></p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">handleFileChange</span><span class="token punctuation">(</span>event<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> selectedFile <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedFile <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>selectedFile<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> file <span class="token operator">=</span> selectedFile<span class="token punctuation">;</span>

    <span class="token comment">// 预览文本文件前 1000 个字符</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;text/plain&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>selectedFile<span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      reader<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        state<span class="token punctuation">.</span>customInfo <span class="token operator">=</span> reader<span class="token punctuation">.</span>result<span class="token operator">?.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        reader<span class="token punctuation">.</span><span class="token function">readAsText</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;请选择支持的文件类型!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="其他个性化功能逻辑" tabindex="-1"><a class="header-anchor" href="#其他个性化功能逻辑"><span>其他个性化功能逻辑</span></a></h2><h3 id="标点符号和空格的相互转换功能" tabindex="-1"><a class="header-anchor" href="#标点符号和空格的相互转换功能"><span>标点符号和空格的相互转换功能</span></a></h3><p>现在很多人的键盘输入场景都是在聊天框，一般会用空格来替代标点符号。所以这三种模式下都提供了标点符号和空格的相互转换功能，从而适合更多中国宝宝的打字习惯。</p><p>利用正则，将文案相互转换：</p><div class="language-tsx line-numbers-mode" data-ext="tsx" data-title="tsx"><pre class="language-tsx"><code><span class="token keyword">function</span> <span class="token function">replacePunctuationWithSpace</span><span class="token punctuation">(</span>input<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> punctuationRegex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.,;:!?(){}[\\]\\\\/&#39;&quot;\`“”‘’…—～，《》「」【】·、。！？；：]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gu</span></span><span class="token punctuation">;</span> <span class="token comment">// 匹配大多数常见标点符号</span>
  <span class="token keyword">return</span> input<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>punctuationRegex<span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 连续空格替换为一个空格</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="异常情况处理" tabindex="-1"><a class="header-anchor" href="#异常情况处理"><span>异常情况处理</span></a></h2><p>在运行过程中出现过排行榜被人刷屏以及刷数据的情况，对此，我做了以下处理：</p><h3 id="刷数据情况处理" tabindex="-1"><a class="header-anchor" href="#刷数据情况处理"><span>刷数据情况处理</span></a></h3><p>遇到过排行榜被很多无效用户 id 刷屏的情况，为此，我在保存排行榜数据的接口中增加了中间件，来校验用户名和用户 id 是否一致从而验证用户准确性</p><p>另外，还遇到过很多离谱数据的情况，这里我暂时只能将数据限制到合理范围内，超出范围的将会报错。</p><h3 id="刷屏情况" tabindex="-1"><a class="header-anchor" href="#刷屏情况"><span>刷屏情况</span></a></h3><p>这里我使用了 <code>koa2-ratelimit</code> 组件</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> RateLimit <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa2-ratelimit&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>RateLimit<span class="token punctuation">;</span>

<span class="token keyword">const</span> postSave <span class="token operator">=</span> RateLimit<span class="token punctuation">.</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">interval</span><span class="token operator">:</span> <span class="token number">30000</span><span class="token punctuation">,</span>
  <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// limit each IP to 1 requests per 30s</span>
  <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&quot;提交太频繁啦，30 秒之后再试吧！&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">prefixKey</span><span class="token operator">:</span> <span class="token string">&#39;xxxx&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据 IP 地址限制提交频次。</p>`,50);function R(I,D){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("地址："),n("a",r,[s("https://typing.yasinchan.com"),t(a)])]),n("p",null,[s("源码："),n("a",k,[s("https://github.com/YasinChan/typing"),t(a)])]),d,n("p",null,[s("这是整个 "),n("a",v,[s("Typing"),t(a)]),s(" 最重要的一个模块，主要逻辑可以查看"),n("a",m,[s("文件路径"),t(a)]),s("。")]),b,g,h,n("p",null,[s("在这里我定义了一个 "),n("a",f,[s("JSON 文件"),t(a)]),s("用来储存文案，结构如下")]),y,n("p",null,[s("需要明确的逻辑是用户在输入过程中，是需要记录已输入、输入错误、未输入的记录的，同时用户输入过程中的每个字都需要同步反映到文案上，所以文案中每个字都需要单独控制，所以我通过以下方式渲染到 HTML 上，代码查看"),n("a",q,[s("文件路径"),t(a)])]),x,n("p",null,[s("这是 MDN 的解释，简单来说，比如搜狗输入法这种 "),w,s(" ，可以将键盘上的字母转换成中文，当我们在使用这类 IME 时，浏览器提供了 "),n("a",_,[s("CompositionEvent"),t(a)]),s(" 相关事件，")]),E,n("p",null,[s("这是 MDN 对 "),C,s(" 的解释，就是说当输入一个字符，当被渲染到浏览器之前会触发这个事件，这个事件常作为现代富文本编辑器的核心事件，如 "),n("a",T,[s("slate"),t(a)]),s(" 等。")]),A])}const N=e(l,[["render",R],["__file","typing-enter.html.vue"]]),Y=JSON.parse('{"path":"/post/typing-enter.html","title":"Typing 项目技术总结 - 字符输入逻辑","lang":"zh-CN","frontmatter":{"date":"2024-03-25T00:00:00.000Z","head":[["meta",{"name":"keywords","content":"typing, enter, beforeinput, Fisher-Yates, CompositionEvent, beforeinput, 正则"}],["meta",{"name":"description","content":"https://typing.yasinchan.com/ 字符输入逻辑介绍"}]],"tag":["typing","beforeinput","CompositionEvent","Fisher-Yates","reg"],"sticky":true,"excerpt":"<p>打字网站 <a href=\\"https://typing.yasinchan.com\\" target=\\"_blank\\">Typing</a> 字符输入逻辑</p>"},"headers":[{"level":2,"title":"文案渲染","slug":"文案渲染","link":"#文案渲染","children":[]},{"level":2,"title":"输入框","slug":"输入框","link":"#输入框","children":[{"level":3,"title":"CompositionEvent 和 beforeinput","slug":"compositionevent-和-beforeinput","link":"#compositionevent-和-beforeinput","children":[]},{"level":3,"title":"监听输入事件用于记录内容用于错误统计和回放功能","slug":"监听输入事件用于记录内容用于错误统计和回放功能","link":"#监听输入事件用于记录内容用于错误统计和回放功能","children":[]},{"level":3,"title":"禁用部分输入和键盘事件，避免干扰","slug":"禁用部分输入和键盘事件-避免干扰","link":"#禁用部分输入和键盘事件-避免干扰","children":[]}]},{"level":2,"title":"文案与输入内容绑定","slug":"文案与输入内容绑定","link":"#文案与输入内容绑定","children":[]},{"level":2,"title":"限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑","slug":"限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑","link":"#限时模式、计时模式、自定义模式下的特定逻辑和输入组件的绑定逻辑","children":[{"level":3,"title":"Fisher-Yates 洗牌算法","slug":"fisher-yates-洗牌算法","link":"#fisher-yates-洗牌算法","children":[]},{"level":3,"title":"上传文档","slug":"上传文档","link":"#上传文档","children":[]}]},{"level":2,"title":"其他个性化功能逻辑","slug":"其他个性化功能逻辑","link":"#其他个性化功能逻辑","children":[{"level":3,"title":"标点符号和空格的相互转换功能","slug":"标点符号和空格的相互转换功能","link":"#标点符号和空格的相互转换功能","children":[]}]},{"level":2,"title":"异常情况处理","slug":"异常情况处理","link":"#异常情况处理","children":[{"level":3,"title":"刷数据情况处理","slug":"刷数据情况处理","link":"#刷数据情况处理","children":[]},{"level":3,"title":"刷屏情况","slug":"刷屏情况","link":"#刷屏情况","children":[]}]}],"git":{"updatedTime":1716429817000,"contributors":[{"name":"yaoyao","email":"yasinchan2016@gmail.com","commits":1},{"name":"yasinchan","email":"yasinchan2016@gmail.com","commits":1}]},"filePathRelative":"post/typing-enter.md"}');export{N as comp,Y as data};
