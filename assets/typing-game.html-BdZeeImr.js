import{_ as e,r as o,o as c,c as i,a as n,b as s,d as t,e as p}from"./app-Ck2BnQe9.js";const l={},u=n("h1",{id:"typing-项目技术总结-比一比功能之-websocket-的使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#typing-项目技术总结-比一比功能之-websocket-的使用"},[n("span",null,"Typing 项目技术总结 - 比一比功能之 WebSocket 的使用")])],-1),r={href:"https://typing.yasinchan.com/game",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/YasinChan/typing",target:"_blank",rel:"noopener noreferrer"},k=p('<p><img src="https://file.yasinchan.com/GGisDKdUAHVb92hrBoj5hgBwjcDiGoXj/3483647528.png" alt=""></p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>「比一比」，是一个基于 websocket 实现的在线多人打字比赛的功能。包括登录与非登录状态下的<strong>创建、分享、进入、实时消息发送、准备、开始、结算</strong>等完整的游戏流程。</p></div><p>如果要前端实现一个在线实时的游戏，可以用到包括但是不限于以下的几种技术：</p><ol><li>WebSocket</li><li>WebRTC (Real-Time Communication)</li><li>Server-Sent Events (SSE) 或 Long Polling</li><li>Message Queuing (MQ) 或 Publish-Subscribe (Pub/Sub) 模式</li><li>轮询服务器</li></ol><p>这里我主要是用的是<strong>WebSockets</strong>，WebSockets 可以在用户的浏览器和服务器之间打开交互式通信会话。使用此 API，你可以向服务器发送消息并接收事件驱动的响应，而无需通过轮询服务器的方式以获得响应。</p>',5),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/WebSockets_API",target:"_blank",rel:"noopener noreferrer"},m=n("h2",{id:"服务端",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#服务端"},[n("span",null,"服务端")])],-1),b={href:"https://github.com/websockets/ws",target:"_blank",rel:"noopener noreferrer"},g=p(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">pnpm</span> i ws
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h3><p>这里的 node 使用的是 koa2，所以初始化方式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;node:https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8989</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Client connected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received: %s&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, client!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nginx-配置" tabindex="-1"><a class="header-anchor" href="#nginx-配置"><span>nginx 配置</span></a></h3><p>启动 node 后，配合 nginx 相关配置：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>
    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>
    <span class="token directive"><span class="token keyword">server_name</span>  example.com</span><span class="token punctuation">;</span>

    ...

    <span class="token directive"><span class="token keyword">location</span> /ws</span> <span class="token punctuation">{</span>
    	<span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8989</span><span class="token punctuation">;</span>
	    <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span>
    	<span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>
    	<span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">&quot;upgrade&quot;</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时前端可以通过 <code>wss://example.com/ws</code> 来进行链接</p><h3 id="wss-和-ws" tabindex="-1"><a class="header-anchor" href="#wss-和-ws"><span>wss 和 ws</span></a></h3><p>通常，WebSocket 的 URL 使用 ws:// 开头，而 wss:// 则是 ws:// 的安全版本，它使用了 TLS/SSL 加密，以确保通信的安全性。因此，wss:// 的协议地址就类似于 https:// 的安全版本，上面 nginx 中的配置可以看到这个 <code>server</code> 是监听端口 443，来启用 SSL 和 HTTP/2 的部分，同理对于该 <code>server</code> 下的路径都将会使用 https。</p><p>需要注意的一点是与普通的 HTTP 请求一样，WebSocket 连接也受到同源策略的限制。同源策略要求 WebSocket 连接的源（即发起连接的页面的域名、协议和端口）必须与服务器端 WebSocket 的地址完全一致，否则会遇到跨域访问问题，所以相关接口也需要定义在上述的 <code>server</code> 中。</p><h2 id="前端" tabindex="-1"><a class="header-anchor" href="#前端"><span>前端</span></a></h2><p>通过上述定义启动 node 服务后，我们就有了 <code>wss://example.com/ws</code> 地址可以用来进行前后端的 WebSocket 连接。</p><h3 id="初始化-1" tabindex="-1"><a class="header-anchor" href="#初始化-1"><span>初始化</span></a></h3><p>与 node 环境不同的是，浏览器环境本身就有了全局的 WebSocket 构造函数，不需要引入其他的库。由此，我们可以通过如下方式进行初始化</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wss://example.com/ws?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>参数<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 连接打开时的事件</span>
wss<span class="token punctuation">.</span><span class="token function-variable function">onopen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接已打开！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 连接关闭时的事件</span>
wss<span class="token punctuation">.</span><span class="token function-variable function">onclose</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> CloseEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 连接已关闭！&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 连接出错时的事件</span>
wss<span class="token punctuation">.</span><span class="token function-variable function">onerror</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;WebSocket 错误：&#39;</span> <span class="token operator">+</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息"><span>发送消息</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 前端向后端发送消息，后端的 &#39;message&#39; 回调中将会接收到这里的消息</span>
wss<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 服务端发送消息的 api 也是 send，后文将具体介绍这块</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前端传参与服务端获取" tabindex="-1"><a class="header-anchor" href="#前端传参与服务端获取"><span>前端传参与服务端获取</span></a></h3><p>在初始化过程中，会有传参需求。我们可以通过在 wss 链接上加上 query 进行参数传递，服务端可以通过解析 query 获取参数值进行相关操作，node 环境下 query 可以在 connection 事件回调中的第二个参数内读取到：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// node 端</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;wss://example.com/ws&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> searchParams <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">;</span>

  <span class="token keyword">const</span> params <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> 参数 <span class="token punctuation">}</span> <span class="token operator">=</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上，连接完成，将在控制台看到相关日志。</p><h2 id="场景分析" tabindex="-1"><a class="header-anchor" href="#场景分析"><span>场景分析</span></a></h2><p>说完双端初始化，接下来便是对本项目所使用的场景进行分析开发了。</p>`,24),h={href:"https://typing.yasinchan.com/game",target:"_blank",rel:"noopener noreferrer"},w=p(`<p><img src="https://file.yasinchan.com/DvgcN0BTCgLEXVxFxtAXeIMeh4Ok5UTI/321876292 (1).png" alt="图片"></p><p>在进入房间后，会有<strong>发送实时消息、消息列表、准备</strong>等功能，对于房主有<strong>开始游戏、关闭房间、踢人</strong>等功能，其他玩家也会有<strong>退出房间</strong>等功能。</p><p><img src="https://file.yasinchan.com/GGisDKdUAHVb92hrBoj5hgBwjcDiGoXj/3483647528.png" alt=""></p><p>在进行输入操作后，还实时同步输入进度，其他玩家都可以看到进度。</p><h3 id="关键点整理" tabindex="-1"><a class="header-anchor" href="#关键点整理"><span>关键点整理</span></a></h3><h4 id="技术要求" tabindex="-1"><a class="header-anchor" href="#技术要求"><span>技术要求</span></a></h4><p>总结以上内容，技术实现上主要为三点：</p><ol><li>多个房间并行 WebSocket 且各自独立如何进行设计管理；</li><li>实时消息传输会分为三点： <ol><li>状态同步。如已准备、取消准备、游戏开始/结束、加入/退出房间等状态，这些状态也会在实时消息框中呈现；</li><li>消息同步。如发送的实时消息内容，同上这些状态也会在实时消息框中呈现；</li><li>输入内容的同步。正如上面所说，玩家的输入操作都会实时在其他玩家的输入界面呈现，但不会在实时消息框中呈现。</li></ol></li><li>房主关闭房间，和玩家退出房间，对应的是前后端关闭 WebSocket 的情况。</li></ol><h4 id="边界情况" tabindex="-1"><a class="header-anchor" href="#边界情况"><span>边界情况</span></a></h4><p>另外还需要关注边界情况：</p><ol><li>房主已经创建了房间的情况下再次创建如何处理；</li><li>房主或者玩家在房间内刷新了页面后如何处理；</li><li>房间人满了，还有人根据分享链接进入后如何处理；</li><li>房间被关闭了，通过分享链接进入后如何处理；</li><li>房主关闭房间后，房间内的玩家也需要接收到相关关闭通知，同理玩家退出房间或者被房主踢出房间也需要通知其他人；</li><li>房间超时管理；</li></ol><p>我们分别解决下上述三种技术问题和相关边界情况：</p><h3 id="多房间场景下-websocket-解决方案" tabindex="-1"><a class="header-anchor" href="#多房间场景下-websocket-解决方案"><span>多房间场景下 WebSocket 解决方案</span></a></h3><p>从服务端角度来看，当用户创建了一个房间，意味着是启动了一个 WebSocket 服务。可能一般我们会认为，每个房间都应该对应一个新的 WebSocket 服务。那么是不是意味着每创建一个房间，都要 new 一次 WebSocket 呢？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// node 端创建 ws 服务</span>
<span class="token keyword">const</span> server <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8989</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如这段代码以及上面 nginx 配置可以看出，创建的服务域名是跟所启动的端口以及 nginx 代理的域名相关的，所以如果要每次创建房间都 new 一次的话，意味着创建之前都需要从服务端获取其单独启动的一个新的域名或者端口，这样无论是管理起来还是对服务器的压力都有影响。所以，这里我的实现方式是新创建的房间都统一在这 <code>wss</code> 一个实例下进行管理。</p><p>为此，我在 node 端定义了一个常量 <code>clients</code>，用于房间的管理</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * clients 的结构
 * <span class="token punctuation">{</span>
 *   [id]: <span class="token punctuation">{</span>
 *     player: <span class="token punctuation">{</span>
 *       [name]: <span class="token punctuation">{</span>
 *         ws,
 *         isOwner: boolean,
 *         isReady: boolean,
 *       <span class="token punctuation">}</span>
 *     <span class="token punctuation">}</span>,
 *     index: number | string,
 *     countDown: number ｜ string,
 *     time: 0,
 *     count: 2,
 *   <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">const</span> clients <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每创建一个新的房间，都会根据创建者的 userName 生成一个唯一 ID，另外还有创建阶段设置的文案 id，倒计时时长，玩家数量的信息，这些信息就会在上述的前端初始化过程中作为 <code>query</code> 参数拼接到 <code>wss://example.com/ws?</code> 后面。</p><p>接着就是 <a href="#%E5%89%8D%E7%AB%AF%E4%BC%A0%E5%8F%82%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%8E%B7%E5%8F%96">#前端传参与服务端获取</a> 中所述的解析。</p><p>当解析到相关数据后，便会将唯一 ID 作为 key ，其他信息作为 value，被 set 到 <code>clients</code> 上。而房主和后来加入的玩家信息则作为 <code>player</code> 属性的内容被保存。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;wss://example.com/ws&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> searchParams <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams<span class="token punctuation">;</span>

  <span class="token keyword">const</span> params <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>searchParams<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> id <span class="token operator">=</span> params<span class="token punctuation">.</span>id<span class="token punctuation">;</span>

  <span class="token operator">...</span>

  <span class="token keyword">const</span> project <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>project<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 没有读取到 id 则认为是房主创建的</span>

    <span class="token operator">...</span>

    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token doc-comment comment">/**
      * <span class="token punctuation">{</span>
      *     player: <span class="token punctuation">{</span>
      *       [name]: <span class="token punctuation">{</span>
      *         ws,
      *         isOwner: boolean,
      *         isReady: boolean,
      *       <span class="token punctuation">}</span>
      *     <span class="token punctuation">}</span>,
      *     index: number | string,
      *     countDown: number ｜ string,
      *     time: 0,
      *     count: 2,
      *   <span class="token punctuation">}</span>
       */</span>
      <span class="token operator">...</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    clients<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

    <span class="token comment">// 否则就是其他玩家加入房间</span>

    <span class="token operator">...</span>
    <span class="token comment">// project.xxxx = xxx</span>

  <span class="token punctuation">}</span>

  <span class="token operator">...</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如上述代码，期间会处理相关房主和其他玩家的信息，然后改变 <code>clients</code> 的信息。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>需要注意的是，本次 <code>connection</code> 回调的第一个参数 <code>ws</code> 也需要保存到 <code>clients</code> 中，因为后续接收到前端 send 过来的信息处理后，还是会有发送出去的需求。这里的 <code>ws</code> 就是对应创建本次连接的用户 ws 实例，这里与该用户进行绑定后，后面就可以颗粒度控制。</p></div><h3 id="实时消息的传输管理" tabindex="-1"><a class="header-anchor" href="#实时消息的传输管理"><span>实时消息的传输管理</span></a></h3><p>前端通过 <code>wss.send(msg)</code> 的方式发送消息，node 端将会在 <code>message</code> 的回调中接收消息</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// node 端</span>
wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Client connected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Received: %s&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于服务端只启动了一个实例，意味着所有房间的所有用户发送的消息，都会在这个唯一的 <code>connection</code> 回调中接收到。现在的问题便是：</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>如何区分是<strong>哪个房间</strong>的<strong>哪位玩家</strong>发送的<strong>什么类型</strong>消息，又是需要通知到<strong>哪些玩家</strong>。</p></div><p>这里有四个关键点：<strong>哪个房间</strong>、<strong>哪位玩家</strong>、<strong>什么类型</strong>、<strong>哪些玩家</strong>，我们一一说道。</p><p>关于前三点，我们需要在前端 <code>wss.send()</code> 时将必要的信息也传输进来，可以通过</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 前端</span>
wss<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> id<span class="token punctuation">,</span>
    name<span class="token operator">:</span> name<span class="token punctuation">,</span>
    info<span class="token operator">:</span> info<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样将信息传输到服务端，在服务端 <code>message</code> 的回调中解析</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   *  <span class="token punctuation">{</span>
   *    id: string,
   *    name: string,
   *    info: string,
   *    typing: <span class="token punctuation">{</span>
   *      len: number,
   *      accuracy: string
   *    <span class="token punctuation">}</span>,
   *    action: []
   *  <span class="token punctuation">}</span>
   */</span>
  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这段代码中的注释注意下，接着我们说上面提到的三点</p><ol><li><p>状态同步</p><p>我是通过这段注释中的 <code>action</code> 字段进行传输的，比如已准备、取消准备这些。</p></li><li><p>消息同步</p><p>这个就是 <code>info</code> 字段</p></li><li><p>输入内容的同步</p><p>玩家的输入操作都会实时在其他玩家的输入界面呈现， <img src="https://file.yasinchan.com/uy54BGpiRkhBCouAUmgtYd2TyplpTGHh/988799945 2.png" alt="alt text"> 我这里是通过 <code>typing</code> 字段来进行传输和渲染。</p></li></ol><p>服务端接收到相关信息后，也会有部分处理后需要发送到前端，这里我们就需要用到 clients 中存储的各位用户的 ws 对象来进行各自的控制。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">incoming</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> currentProject <span class="token operator">=</span> clients<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>info<span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> w <span class="token keyword">in</span> currentProject<span class="token punctuation">.</span>player<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token operator">...</span>

    <span class="token comment">// node 端通过这样，向各个用户的浏览器发送消息。</span>
    <span class="token comment">// 当然这里也可以根据各自的情况选择性的发送。</span>
    currentProject<span class="token punctuation">[</span><span class="token string">&#39;player&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;ws&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>

      <span class="token operator">...</span>

    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="房间关闭和玩家退出房间" tabindex="-1"><a class="header-anchor" href="#房间关闭和玩家退出房间"><span>房间关闭和玩家退出房间</span></a></h3><p>这里就涉及到 ws 服务前后端关闭的触发和回调了。</p><p>房主关闭房间，则直接在前端</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 前端</span>
wss<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即可，服务端将会触发 <code>close</code> 回调</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// node</span>
ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;close&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">code<span class="token punctuation">,</span> reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>

  <span class="token operator">...</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在回调中根据两个参数，删掉对应 <code>client</code> 中的信息。</p><p>而其他玩家触发「退出房间」，则是</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token comment">// 前端</span>
wss<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
  <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> id<span class="token punctuation">,</span>
    name<span class="token operator">:</span> name<span class="token punctuation">,</span>
    action<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    info<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">退出房间</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端则会通过上述的方式，根据 <code>action</code> 的 <code>exit</code> 将 <code>clients</code> 中相关玩家数据删除。</p><h3 id="边界情况-1" tabindex="-1"><a class="header-anchor" href="#边界情况-1"><span>边界情况</span></a></h3><p>这里我们主要说超时管理。</p><p>我们知道，这个服务端的 WebSocket 服务是在 node 服务启动是时候就会启动，后续新增的房间都是保存在 <code>clients</code> 中的。这意味着我们需要手动去清理 <code>clients</code> 中的数据。由于是浏览器中的游戏，我们没有办法在玩家没有主动触发关闭房间的情况下知道房间是否需要关闭，说人话就是房主很有可能玩结束了直接就关闭网页了，也可能是断网了等其他意外情况，导致服务端也不知道这个这个房间是否需要关闭。如果我们不做处理，除非重启 node 服务，否则该房间信息将会一直保存在 <code>clients</code> 中。</p><p>为此，需要一个无活动超过一段时间主动关闭房间的机制，我这里定的是五分钟无操作则会关闭。</p><p>因为前端的 ws 活动反应到服务端都会改变 clients 中对应的数据，所以我这里是利用的 <code>proxy</code> 代理了 <code>clients</code> 中的内容，代理的时机就是</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token function">connection</span><span class="token punctuation">(</span><span class="token parameter">ws<span class="token punctuation">,</span> req</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token operator">...</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>project<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token operator">...</span>

    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">watchObjectWithTimeout</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">player</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">{</span>
              ws<span class="token punctuation">,</span>
              <span class="token literal-property property">isOwner</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
              <span class="token literal-property property">isReady</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">index</span><span class="token operator">:</span> index<span class="token punctuation">,</span>
          <span class="token literal-property property">countDown</span><span class="token operator">:</span> countDown<span class="token punctuation">,</span>
          <span class="token literal-property property">time</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          <span class="token literal-property property">count</span><span class="token operator">:</span> count<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token constant">LEFT_TIME</span><span class="token punctuation">,</span>
        <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
          <span class="token comment">// 回调</span>

          <span class="token operator">...</span>

          clients<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      clients<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>

    <span class="token operator">...</span>


  <span class="token punctuation">}</span>

  <span class="token operator">...</span>

<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>watchObjectWithTimeout</code> 方法，则是将这个对象进行代理，当对象发生变化时，执行回调。目的是每次开的 websocket 房间若在 5 分钟内没有操作，则需要关闭清理。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">watchObjectWithTimeout</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> timeout <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> lastChangeTimestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> timeoutIdRemind <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> timeoutId <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> remindTimeout <span class="token operator">=</span> timeout <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutIdRemind<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除旧的定时器</span>
      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清除旧的定时器</span>
      Reflect<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 先设置值</span>
      lastChangeTimestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新最后更改时间戳</span>

      timeoutIdRemind <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastChangeTimestamp <span class="token operator">&gt;=</span> remindTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;remind&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行回调，传递发生变化的属性名</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> remindTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 设置新的定时器，检查是否超时</span>
      timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastChangeTimestamp <span class="token operator">&gt;=</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">callback</span><span class="token punctuation">(</span>prop<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行回调，传递发生变化的属性名</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  timeoutIdRemind <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastChangeTimestamp <span class="token operator">&gt;=</span> remindTimeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&#39;remind&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行回调，传递发生变化的属性名</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> remindTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

  timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastChangeTimestamp <span class="token operator">&gt;=</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行回调，传递发生变化的属性名</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,56);function y(f,x){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("地址："),n("a",r,[s("https://typing.yasinchan.com/game"),t(a)])]),n("p",null,[s("源码："),n("a",d,[s("https://github.com/YasinChan/typing"),t(a)])]),k,n("p",null,[s("本文将主要介绍项目中对于 WebSockets 在服务端与前端的开发方式，关于 WebSockets 的 API，可以查看 "),n("a",v,[s("MDN"),t(a)])]),m,n("p",null,[s("项目的服务端是使用的 Node.js，Node 端是没有原生 WebSocket 的，这里我使用了库："),n("a",b,[s("https://github.com/websockets/ws"),t(a)]),s("来实现 WebSocket 的功能。")]),g,n("p",null,[s("因为本项目已经完成，我们就直接根据完成好的内容进行逆向分析。正如 "),n("a",h,[s("https://typing.yasinchan.com/game"),t(a)]),s(" 所见，整个游戏过程包括设置配置进行创建，创建完成后可以邀请用户或者用户通过房间列表加入房间。这意味着需要同时存在很多房间。")]),w])}const S=e(l,[["render",y],["__file","typing-game.html.vue"]]),_=JSON.parse('{"path":"/post/typing-game.html","title":"Typing 项目技术总结 - 比一比功能之 WebSocket 的使用","lang":"zh-CN","frontmatter":{"date":"2024-04-11T00:00:00.000Z","head":[["meta",{"name":"keywords","content":"typing, game, pk, WebSocket, Reflect, Proxy"}],["meta",{"name":"description","content":"https://typing.yasinchan.com/ 比一比功能之 WebSocket 的使用"}]],"tag":["typing","Reflect","Proxy","game","websocket"],"sticky":true,"excerpt":"<p>打字网站 <a href=\\"https://typing.yasinchan.com\\" target=\\"_blank\\">Typing</a> 比一比功能介绍之 WebSocket 的使用</p>"},"headers":[{"level":2,"title":"服务端","slug":"服务端","link":"#服务端","children":[{"level":3,"title":"初始化","slug":"初始化","link":"#初始化","children":[]},{"level":3,"title":"nginx 配置","slug":"nginx-配置","link":"#nginx-配置","children":[]},{"level":3,"title":"wss 和 ws","slug":"wss-和-ws","link":"#wss-和-ws","children":[]}]},{"level":2,"title":"前端","slug":"前端","link":"#前端","children":[{"level":3,"title":"初始化","slug":"初始化-1","link":"#初始化-1","children":[]},{"level":3,"title":"发送消息","slug":"发送消息","link":"#发送消息","children":[]},{"level":3,"title":"前端传参与服务端获取","slug":"前端传参与服务端获取","link":"#前端传参与服务端获取","children":[]}]},{"level":2,"title":"场景分析","slug":"场景分析","link":"#场景分析","children":[{"level":3,"title":"关键点整理","slug":"关键点整理","link":"#关键点整理","children":[]},{"level":3,"title":"多房间场景下 WebSocket 解决方案","slug":"多房间场景下-websocket-解决方案","link":"#多房间场景下-websocket-解决方案","children":[]},{"level":3,"title":"实时消息的传输管理","slug":"实时消息的传输管理","link":"#实时消息的传输管理","children":[]},{"level":3,"title":"房间关闭和玩家退出房间","slug":"房间关闭和玩家退出房间","link":"#房间关闭和玩家退出房间","children":[]},{"level":3,"title":"边界情况","slug":"边界情况-1","link":"#边界情况-1","children":[]}]}],"git":{"updatedTime":1712923648000,"contributors":[{"name":"YasinChan","email":"yasinchan2016@gmail.com","commits":1}]},"filePathRelative":"post/typing-game.md"}');export{S as comp,_ as data};
