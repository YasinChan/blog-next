import{_ as e,o as s,c as a,e as i}from"./app-B5fP3dJT.js";const n={},t=i(`<h1 id="git-子仓库管理" tabindex="-1"><a class="header-anchor" href="#git-子仓库管理"><span>git 子仓库管理</span></a></h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>有一种场景，在我们的主仓库下需要引入其他仓库的，同时要保持双方的独立。此时，我们可以使用 git 提供的 git submodules 方法</p></div><h2 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h2><p>我们新建一个场景，有一个主仓库叫做 <code>git-father</code></p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/xxx/git-father
├── .git
└── README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要将另一个仓库 <code>git-sub</code> 引入此仓库中</p><h3 id="引入子仓库" tabindex="-1"><a class="header-anchor" href="#引入子仓库"><span>引入子仓库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 在主仓库 git-father 下执行</span>
<span class="token function">git</span> submodule <span class="token function">add</span> git@github.com:YasinChan/git-sub.git git-sub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，在主仓库下，子仓库将被引入，同时生成 <code>.gitmodules</code> 配置文件</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/xxx/git-father
├── .git
├── .gitmodules
├── README.md
└── git-sub
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="更新子仓库" tabindex="-1"><a class="header-anchor" href="#更新子仓库"><span>更新子仓库</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 方法一</span>
<span class="token function">git</span> submodule foreach <span class="token function">git</span> pull origin master
<span class="token comment"># 方法二</span>
<span class="token builtin class-name">cd</span> git-sub
<span class="token function">git</span> pull origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="克隆一个包含子仓库的仓库" tabindex="-1"><a class="header-anchor" href="#克隆一个包含子仓库的仓库"><span>克隆一个包含子仓库的仓库</span></a></h3><p>前面说到主仓库和子仓库是互相保持独立的，所以无论是 push 还是 pull 操作，都需要单独执行<br> 所以我们在 clone 主仓库时，不会同时将子仓库 clone 下来。此时可以如下操作</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 克隆主仓库</span>
<span class="token function">git</span> clone git@github.com:YasinChan/git-father.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>此时结构如下</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>/xxx/git-father
├── .git
├── .gitmodules
├── README.md
└── git-sub
# git-sub 是一个空的文件夹
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后继续执行</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule init
<span class="token comment"># 提示：Submodule &#39;git-sub&#39; (git@github.com:YasinChan/git-sub.git) registered for path &#39;git-sub&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">git</span> submodule update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时，<code>git-sub</code> 将被拉取下来</p><h3 id="gitmodules" tabindex="-1"><a class="header-anchor" href="#gitmodules"><span>.gitmodules</span></a></h3><p>这个配置文件记录了项目 URL 与已经拉取的本地目录之间的映射关系，也就是我们如上 <code>git submodule</code> 相关操作都是读取的此文件的配置。</p>`,24),d=[t];function l(c,u){return s(),a("div",null,d)}const o=e(n,[["render",l],["__file","git-submodule.html.vue"]]),m=JSON.parse('{"path":"/post/git-submodule.html","title":"git 子仓库管理","lang":"zh-CN","frontmatter":{"date":"2020-05-22T00:00:00.000Z","tag":["git","tech"],"excerpt":"有一种场景，在我们的主仓库下需要引入其他仓库的，同时要保持双方的独立。此时，我们可以使用 git 提供的 git submodules 方法"},"headers":[{"level":2,"title":"场景","slug":"场景","link":"#场景","children":[{"level":3,"title":"引入子仓库","slug":"引入子仓库","link":"#引入子仓库","children":[]},{"level":3,"title":"更新子仓库","slug":"更新子仓库","link":"#更新子仓库","children":[]},{"level":3,"title":"克隆一个包含子仓库的仓库","slug":"克隆一个包含子仓库的仓库","link":"#克隆一个包含子仓库的仓库","children":[]},{"level":3,"title":".gitmodules","slug":"gitmodules","link":"#gitmodules","children":[]}]}],"git":{"updatedTime":1711200423000,"contributors":[{"name":"YasinChan","email":"yasinchan2016@gmail.com","commits":1}]},"filePathRelative":"post/git-submodule.md"}');export{o as comp,m as data};
